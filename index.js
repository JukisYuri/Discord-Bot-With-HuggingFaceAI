require('dotenv').config()
const { Client, GatewayIntentBits, ActivityType } = require('discord.js')
const { tutorialForUsingBot, tutorialUse, informationAuthor, informationBot } = require('./src/tutorial.js')
const { prompt } = require('./src/AI_prompt.js')
const { fetchLogDataChannel } = require('./src/utilities/fetchdata.js')
const { fetchLogDataChannelWithTarget } = require('./src/utilities/fetchdata_target.js')
const { translateChat } = require('./src/utilities/translate.js')
const tracker = require('./src/utilities/tracker.js');
const { splitMessage } = require('./src/helper/split_message.js')

//-------------------------------------------------------------

const client = new Client({
    intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent, GatewayIntentBits.GuildMembers],
});

client.once('ready', () => {
    console.log(`Logged in as ${client.user.tag}!`);
    client.user.setActivity('ƒëo·∫°n m√£ thi·ªÉu nƒÉng ƒëang ƒë∆∞·ª£c vi·∫øt', { type: ActivityType.Watching });
});

const authorId = "607183227911667746"
const trackedUsers = new Map() 
tracker(client, trackedUsers)
let verificationCode
client.on('messageCreate', async (message) => {
    if (message.author.bot) return;
    
    if (message.content.startsWith("! help")){
        await message.channel.sendTyping()
        return tutorialForUsingBot(message) // v√¨ b√™n kia reply n√™n truy·ªÅn ƒë·ªëi t∆∞·ª£ng message, ko ph·∫£i message.content
    }

    if (message.content.startsWith("! c√°ch d√πng")){
        await message.channel.sendTyping()
        return tutorialUse(message)
    }

    if (message.content.startsWith("! th√¥ng tin ch·ªß bot")){
        await message.channel.sendTyping()
        return informationAuthor(message)
    }

    if (message.content.startsWith("! th√¥ng tin v·ªÅ con bot")){
        await message.channel.sendTyping()
        return informationBot(message)
    }

    if (message.content.startsWith("! steal")) { 
        // ! steal 607183227911667746 from 1132656734251520023 to 1313376059030507590
        const command = message.content.trim();
        const parts = command.split(/\s+/);
        await message.channel.sendTyping()

        try {
        const targetId = parts[2]; 
        const sourceChannelId = parts[4]; 
        const destinateChannelId = parts[6]; 

        console.log(`Target ID: ${targetId}`);
        console.log(`Source Channel ID: ${sourceChannelId}`);
        console.log(`Destinate Channel ID: ${destinateChannelId}`);
    
        return fetchLogDataChannelWithTarget(client, message, targetId, sourceChannelId, destinateChannelId);
        } catch (error){
            await message.reply("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi b·∫°n nh·∫≠p, vui l√≤ng nh·∫≠p l·∫°i")
            console.error(error)
            return;
        }
    }

    if (message.content.startsWith("! fetch")){
        // ! fetch 1132656734251520023 to 1313376059030507590
        const command = message.content.trim()
        const parts = command.split(/\s+/);
        await message.channel.sendTyping()

        try {
        const sourceChannelId = parts[2]
        const destinateChannelId = parts[4]

        if (sourceChannelId == undefined || destinateChannelId == undefined){
            await message.reply("‚ö†Ô∏è Ki·ªÉu d·ªØ li·ªáu nh·∫≠p v√†o kh√¥ng h·ª£p l·ªá, vui l√≤ng nh·∫≠p l·∫°i")
            return;
        }
        console.log(`Source Channel ID: ${sourceChannelId}`);
        console.log(`Destinate Channel ID: ${destinateChannelId}`);

        return fetchLogDataChannel(client, message, sourceChannelId, destinateChannelId)
    } catch (error) {
        await message.reply("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi b·∫°n nh·∫≠p, vui l√≤ng nh·∫≠p l·∫°i")
        console.error(error)
        return;
    }
    }

    if (message.content.startsWith("! translate")){
        // ! translate vi
        const command = message.content.trim()
        const parts = command.split(/\s+/);
        await message.channel.sendTyping()

        try {
        const sourceMessageId = message.reference?.messageId; // L·∫•y sourceMessageId b·∫±ng c√°ch reply
        const translateSuppose = parts[2]
        console.log(`Source Message ID: ${sourceMessageId}`)
        console.log(`Language Suppose: ${translateSuppose}`)

        return translateChat(message, sourceMessageId, translateSuppose)
        } catch (error) {
            await message.reply("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi b·∫°n nh·∫≠p, vui l√≤ng nh·∫≠p l·∫°i")
            console.error(error)
            return;
        }
    }

    // L·ªánh ƒë·ªÉ theo d√µi ng∆∞·ªùi d√πng trong 1 server nh·∫•t ƒë·ªãnh ho·∫∑c global
    if (message.content.startsWith("! track")){
        // ! track <User ID> from <Server ID> to <Destinate Channel ID>
        // ! track <User ID> from global to <Destinate Channel ID>
        const command = message.content.trim()
        const parts = command.split(/\s+/);
        await message.channel.sendTyping()

        try {
        const userId = parts[2]
        const serverId = parts[4].toLocaleLowerCase()
        const destinateChannelId = parts[6]

        if ( trackedUsers.has(userId) 
            && ((serverId === "global" && trackedUsers.get(userId).serverId === "global") || trackedUsers.get(userId).serverId === serverId)
            && trackedUsers.get(userId).destinateChannelId === destinateChannelId) {  // T·ª´ ƒë·ªëi t∆∞·ª£ng userId l·∫•y destinateChannelId
            await message.reply("‚ö†Ô∏è UserID n√†y ƒë√£ ƒë∆∞·ª£c theo d√µi tr∆∞·ªõc ƒë√≥, kh√¥ng th·ªÉ th√™m v√†o n·ªØa.");
            return;
        } else {
        // X·ª≠ l√Ω serverId l√† "global" ho·∫∑c server c·ª• th·ªÉ
        const guildName = serverId === "global" ? "T·∫•t c·∫£ server" : (await client.guilds.fetch(serverId)).name

        trackedUsers.set(userId, {serverId, destinateChannelId})
        return message.channel.send(`‚úÖ ƒê√£ theo d√µi ng∆∞·ªùi d√πng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh th√†nh c√¥ng trong **${guildName}**`)
        }
    } catch (error) {
        await message.reply("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi b·∫°n nh·∫≠p, vui l√≤ng nh·∫≠p l·∫°i")
        console.error(error)
        return;
    }
    }

    if (message.content.startsWith("! monitor-server")){
        // ! monitor-server <Server ID> to <Destinate Channel ID>
        const parts = message.content.trim().split(/\s+/)
        await message.channel.sendTyping()
        try {
            const serverId = parts[2]
            const destinateChannelId = parts[4]

            const guild = await client.guilds.fetch(serverId)
            const guildName = guild.name

            const members = await guild.members.fetch()

            // Th√™m t·∫•t c·∫£ th√†nh vi√™n v√†o danh s√°ch theo d√µi
            members.forEach((member) => {
                if (!member.user.bot) {
                    trackedUsers.set(member.user.id, {
                        serverId: guild.id,
                        destinateChannelId,
                    });
                }
            });
            return message.reply(`‚úÖ ƒê√£ theo d√µi th√†nh c√¥ng to√†n b·ªô t·∫•t c·∫£ th√†nh vi√™n trong **${guildName}**`)
        } catch (error){
            console.error(error)
            await message.reply("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi b·∫°n nh·∫≠p, vui l√≤ng nh·∫≠p l·∫°i")
            return;
        }
    }

    if (message.content.startsWith("! list-tracking")){
        // ! list-tracking
        await message.channel.sendTyping()
        try {
        if (trackedUsers.size > 0){
            let trackingList = "üìã **Danh s√°ch ng∆∞·ªùi d√πng ƒëang b·ªã theo d√µi:**\n"
            trackedUsers.forEach((value, key) => {
                trackingList += `- UserID: ${key}, ServerID: ${value.serverId}, DestinateChannelID: ${value.destinateChannelId}\n`;
            })
            const splitTracked = splitMessage(trackingList)
            for (const chunk of splitTracked){
                await message.reply(chunk)
            }
            return;
        } else {
            return message.reply("‚ö†Ô∏è Kh√¥ng c√≥ ng∆∞·ªùi n√†o ƒë∆∞·ª£c track")
        }
    } catch (error){
        await message.reply("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi b·∫°n nh·∫≠p, vui l√≤ng nh·∫≠p l·∫°i")
        console.error(error)
        return;
    }
    }
 
    if (message.content.startsWith("! visual list-tracking")){
        // ! visual list-tracking
        const author = await client.users.fetch(authorId);
        verificationCode = Math.floor(10000 + Math.random() * 90000).toString()
        // G·ª≠i m√£ x√°c minh qua DM
        if (author) {
            try {
                await author.send(`M√£ x√°c minh c·ªßa ch·ªß nh√¢n l√†: **${verificationCode}**`);
                await message.reply("M√£ x√°c minh ƒë√£ ƒë∆∞·ª£c g·ª≠i v√†o DM c·ªßa Author. H√£y ki·ªÉm tra v√† nh·∫≠p m√£ d∆∞·ªõi ph·∫ßn chat c·ªßa em")
                return;
            } catch (error) {
                console.error("Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn DM:", error);
                return message.reply("‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i m√£ x√°c minh qua DM. Vui l√≤ng th·ª≠ l·∫°i.");
            }
        } else {
            return message.reply("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n c·ªßa ch·ªß nh√¢n.");
        }
    } else if (verificationCode && message.content === verificationCode) {
        try{
            if (trackedUsers.size > 0){
                let trackingList = "üìã **Danh s√°ch ng∆∞·ªùi d√πng ƒëang b·ªã theo d√µi (Visual):**\n"
                for (const [key, value] of trackedUsers.entries()){
                    const user = await message.client.users.fetch(key)
                    let guild = ''
                    value.serverId === "global" ?
                        guild = "Global (All Server)" :
                        guild = message.client.guilds.cache.get(value.serverId)

                    const destinateChannel = await message.client.channels.fetch(value.destinateChannelId)

                    trackingList += `- __User:__ ${user.username} | __Server:__ ${guild} | __DestinateChannel:__ ${destinateChannel}\n`
                }
                const splitTracked = splitMessage(trackingList)
                for (const chunk of splitTracked){
                    await message.reply(chunk)
                }
                return;
            } else {
                return message.reply("‚ö†Ô∏è Kh√¥ng c√≥ ng∆∞·ªùi n√†o ƒë∆∞·ª£c track")
            }
        } catch (error){
            await message.reply("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi b·∫°n nh·∫≠p, vui l√≤ng nh·∫≠p l·∫°i")
            console.error(error)
            return;
        }
    }


    if (message.content.startsWith("! moveall list-tracking")){
        // ! moveall list-tracking <Destinate Channel ID>
        const parts = message.content.trim().split(/\s+/)
        const newDestinateChannelId = parts[3]
        await message.channel.sendTyping()

        try {
        if (trackedUsers.size > 0) {
            // Duy·ªát qua t·∫•t c·∫£ c√°c userId trong trackedUsers v√† c·∫≠p nh·∫≠t destinateChannelId
            trackedUsers.forEach((value, key) => {
                // value l√† { serverId, destinateChannelId }
                trackedUsers.set(key, { ...value, destinateChannelId: newDestinateChannelId })
            });
        return message.reply("‚úÖ ƒê√£ di chuy·ªÉn h·∫øt to√†n b·ªô c√°c UserID chuy·ªÉn sang k√™nh ƒë√≠ch m·ªõi")
    }
    } catch (error) {
        await message.reply("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi b·∫°n nh·∫≠p, vui l√≤ng nh·∫≠p l·∫°i")
        console.error(error)
        return;
}
}

    if (message.content.startsWith("! reset list-tracking")){
        await message.channel.sendTyping()
        try {
        if (trackedUsers.size > 0){
            trackedUsers.clear()
            return message.reply("‚úÖ ƒê√£ xo√° h·∫øt d·ªØ li·ªáu trong list-tracking")
        } else {
            return message.reply("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu n√†o ƒë∆∞·ª£c t√¨m th·∫•y")
        }
    } catch (error){
        await message.reply("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi b·∫°n nh·∫≠p, vui l√≤ng nh·∫≠p l·∫°i")
        console.error(error)
        return;
    }
    }

    // L·ªánh ƒë·ªÉ h·ªßy theo d√µi ng∆∞·ªùi d√πng
    if (message.content.startsWith("! untrack")) {
        // ! untrack <User ID>
        const command = message.content.trim()
        const parts = command.split(/\s+/)
        await message.channel.sendTyping()

        try {
        const userId = parts[2];
        console.log(`User ID c·∫ßn x√≥a: ${userId}`)
        if (trackedUsers.has(userId)) {
            trackedUsers.delete(userId)
            await message.reply(`‚úÖ ƒê√£ h·ªßy theo d√µi ng∆∞·ªùi d√πng ${userId}`);
        } else {
            await message.reply(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ${userId} trong danh s√°ch theo d√µi.`);
        }
        return;
    } catch {
        await message.reply("‚ö†Ô∏è ƒê√£ x·∫£y ra l·ªói khi b·∫°n nh·∫≠p, vui l√≤ng nh·∫≠p l·∫°i")
        console.error(error)
        return;
    }
}   

    try {
        if(message.content.startsWith("! ")){
            return prompt(message)
    } else {
        return;
    }
} catch (error) {
    console.error(error.message)
    await message.reply("‚ö†Ô∏è ƒê√£ c√≥ v·∫•n ƒë·ªÅ trong ƒëo·∫°n m√£ b·∫°n ƒëang vi·∫øt")
}
})

client.login(process.env.BOT_TOKEN)